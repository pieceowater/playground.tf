- name: Setup Kubernetes Cluster
  hosts: k8s_master
  become: true
  tasks:
    - name: Update all packages
      yum:
        name: "*"
        state: latest

    - name: Install essential tools
      yum:
        name: 
          - vim
          - docker
          - socat
          - conntrack-tools
          - iproute
          - iproute-tc
        state: present

    - name: Download crictl binary
      get_url:
        url: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.31.0/crictl-v1.31.0-linux-amd64.tar.gz
        dest: /tmp/crictl.tar.gz

    - name: Extract crictl
      unarchive:
        src: /tmp/crictl.tar.gz
        dest: /usr/local/bin/
        remote_src: yes

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: true
        state: started

    - name: Download kubectl, kubeadm, and kubelet binaries
      get_url:
        url: "https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        mode: '0755'
      loop:
        - kubectl
        - kubeadm
        - kubelet

    - name: Create kubelet service file
      copy:
        dest: /etc/systemd/system/kubelet.service
        content: |
          [Unit]
          Description=kubelet: The Kubernetes Node Agent
          Documentation=https://kubernetes.io/docs/admin/kubelet
          After=network.target

          [Service]
          ExecStart=/usr/local/bin/kubelet \
            --kubeconfig=/etc/kubernetes/kubelet.conf \
            --cgroup-driver=systemd \
            --network-plugin=cni \
            --pod-infra-container-image=k8s.gcr.io/pause:3.5
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target

    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        enabled: true
        state: started

- name: Install and configure containerd
  hosts: k8s_master, k8s_workers
  become: true
  tasks:
    - name: Install containerd
      yum:
        name: containerd
        state: present

    - name: Configure containerd with SystemdCgroup
      copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
          [plugins."io.containerd.grpc.v1.cri".cni]
            bin_dir = "/opt/cni/bin"
            conf_dir = "/etc/cni/net.d"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true
        mode: '0644'

    - name: Restart and enable containerd
      systemd:
        name: containerd
        enabled: true
        state: restarted

# - name: Initialize Kubernetes Master Node
#   hosts: k8s_master
#   become: true
#   tasks:
#     - name: Reset any existing Kubernetes setup
#       command: kubeadm reset -f

#     - name: Initialize Kubernetes
#       command: kubeadm init --pod-network-cidr=10.244.0.0/16 --kubernetes-version=v1.31.2
#       register: kubeadm_init_output

#     - name: Extract kubeadm join command
#       set_fact:
#         join_command: "{{ kubeadm_init_output.stdout | regex_search('kubeadm join .+') }}"
#       when: kubeadm_init_output.rc == 0

#     - name: Create kubeconfig directory
#       file:
#         path: /home/ec2-user/.kube
#         state: directory
#         mode: '0755'
#       when: kubeadm_init_output.rc == 0

#     - name: Copy kubeconfig to user directory
#       command: cp /etc/kubernetes/admin.conf /home/ec2-user/.kube/config
#       when: kubeadm_init_output.rc == 0

#     - name: Set ownership of kubeconfig
#       file:
#         path: /home/ec2-user/.kube/config
#         owner: ec2-user
#         mode: '0644'
#       when: kubeadm_init_output.rc == 0

#     - name: Install Calico network plugin
#       command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
#       when: kubeadm_init_output.rc == 0

#     - name: Output join command for worker nodes
#       debug:
#         msg: "{{ join_command }}"

# - name: Join Worker Nodes to the Cluster
#   hosts: k8s_workers
#   become: true
#   tasks:
#     - name: Join the Kubernetes cluster
#       command: "{{ hostvars[groups['k8s_master'][0]].join_command }}"
#       when: hostvars[groups['k8s_master'][0]].join_command is defined
